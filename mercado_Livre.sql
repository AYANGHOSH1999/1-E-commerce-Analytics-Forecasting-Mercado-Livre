-- 1) Monthly Revenue Growth Rate: For each month, calculate total revenue and month-over-month growth percentage.

SELECT 
    DATE_FORMAT(o.order_purchase_timestamp, '%Y-%m') AS month,
    ROUND(SUM(oi.price), 2) AS total_revenue,
    ROUND(
        (SUM(oi.price) - LAG(SUM(oi.price)) OVER (ORDER BY DATE_FORMAT(o.order_purchase_timestamp, '%Y-%m')))
        / LAG(SUM(oi.price)) OVER (ORDER BY DATE_FORMAT(o.order_purchase_timestamp, '%Y-%m')) * 100,
        2
    ) AS mom_growth_percentage
FROM 
    orders_dataset o
JOIN 
    order_items_dataset oi ON o.order_id = oi.order_id
GROUP BY 
    DATE_FORMAT(o.order_purchase_timestamp, '%Y-%m')
ORDER BY 
    month;
-- ===========================================================================================================================================================================
-- 2) Trailing 3-Month Moving Average of Orders: For each month, calculate the 3-month moving average of the number of orders.

WITH monthly_orders AS (
    SELECT 
        DATE_FORMAT(order_purchase_timestamp, '%Y-%m') AS month,
        COUNT(order_id) AS total_orders
    FROM 
        orders_dataset
    GROUP BY 
        DATE_FORMAT(order_purchase_timestamp, '%Y-%m')
)
SELECT 
    month,
    total_orders,
    ROUND(
        AVG(total_orders) OVER (
            ORDER BY month
            ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
        ), 2
    ) AS trailing_3_month_avg
FROM 
    monthly_orders
ORDER BY 
    month;

-- ===========================================================================================================================================================================
-- 3) Yearly Average Order Value (AOV): Trend Compute average order value (total revenue / total orders) per year.

SELECT 
    YEAR(o.order_purchase_timestamp) AS year,
    ROUND(SUM(oi.price) / COUNT(DISTINCT o.order_id), 2) AS average_order_value
FROM 
    orders_dataset o
JOIN 
    order_items_dataset oi ON o.order_id = oi.order_id
GROUP BY 
    YEAR(o.order_purchase_timestamp)
ORDER BY 
    year;
    
-- ===========================================================================================================================================================================
-- 4) Customer Lifetime Value (CLTV) Approximation: Calculate total revenue generated by each customer. Sort top 10 highest lifetime values.

SELECT 
    c.customer_unique_id,
    ROUND(SUM(oi.price), 2) AS total_revenue
FROM 
    customers_dataset c
JOIN 
    orders_dataset o ON c.customer_id = o.customer_id
JOIN 
    order_items_dataset oi ON o.order_id = oi.order_id
GROUP BY 
    c.customer_unique_id
ORDER BY 
    total_revenue DESC
LIMIT 10;

-- ===========================================================================================================================================================================
-- 5) Top Product Categories by Growth: Identify top 5 categories with the highest year-over-year revenue growth.

WITH category_revenue_by_year AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS year,
        pct.product_category_name_english AS category,
        ROUND(SUM(oi.price), 2) AS total_revenue
    FROM 
        order_items_dataset oi
    JOIN 
        orders_dataset o ON oi.order_id = o.order_id
    JOIN 
        products_dataset p ON oi.product_id = p.product_id
    LEFT JOIN 
        product_category_name_translation pct ON p.product_category_name = pct.product_category_name
    GROUP BY 
        YEAR(o.order_purchase_timestamp),
        pct.product_category_name_english
),
category_growth AS (
    SELECT 
        curr.category,
        curr.year,
        curr.total_revenue,
        prev.total_revenue AS prev_revenue,
        ROUND(
            (curr.total_revenue - prev.total_revenue) / NULLIF(prev.total_revenue, 0) * 100, 2
        ) AS yoy_growth_percentage
    FROM 
        category_revenue_by_year curr
    LEFT JOIN 
        category_revenue_by_year prev 
        ON curr.category = prev.category AND curr.year = prev.year + 1
)
SELECT 
    category,
    year,
    yoy_growth_percentage
FROM 
    category_growth
WHERE 
    yoy_growth_percentage IS NOT NULL
ORDER BY 
    yoy_growth_percentage DESC
LIMIT 5;

-- ===========================================================================================================================================================================
-- 6) Seller Fulfillment Efficiency: For each seller, calculate the average difference between estimated and actual delivery date. Highlight the most efficient ones.

SELECT 
    oi.seller_id,
    ROUND(AVG(DATEDIFF(o.order_estimated_delivery_date, o.order_delivered_customer_date)), 2)
    AS avg_delivery_difference_days
FROM 
    order_items_dataset oi
JOIN 
    orders_dataset o ON oi.order_id = o.order_id
WHERE 
    o.order_delivered_customer_date IS NOT NULL
    AND o.order_estimated_delivery_date IS NOT NULL
GROUP BY 
    oi.seller_id
ORDER BY 
    avg_delivery_difference_days DESC;

-- ===========================================================================================================================================================================
-- 7) Time to First Purchase: For customers with multiple orders, calculate the average number of days between account creation and first purchase.
WITH customer_orders AS (
    SELECT 
        c.customer_unique_id,
        MIN(o.order_purchase_timestamp) AS first_purchase_date,
        COUNT(DISTINCT o.order_id) AS total_orders,
        MIN(o.order_purchase_timestamp) AS account_creation_date
    FROM 
        customers_dataset c
    JOIN 
        orders_dataset o ON c.customer_id = o.customer_id
    GROUP BY 
        c.customer_unique_id
),

repeat_customers AS (
    SELECT 
        customer_unique_id,
        DATEDIFF(first_purchase_date, account_creation_date) AS days_to_first_purchase
    FROM 
        customer_orders
    WHERE 
        total_orders > 1
)

SELECT 
    ROUND(AVG(days_to_first_purchase), 2) AS avg_days_to_first_purchase
FROM 
    repeat_customers;
    
-- ===========================================================================================================================================================================
-- 8) Review Sentiment vs Delivery Time: Compare average delivery days for orders with 1–2 stars vs 4–5 stars.

SELECT 
    CASE
        WHEN r.review_score BETWEEN 1 AND 2 THEN '1-2 Stars'
        WHEN r.review_score BETWEEN 4 AND 5 THEN '4-5 Stars'
    END AS review_group,
    ROUND(AVG(DATEDIFF(o.order_delivered_customer_date, o.order_estimated_delivery_date)), 2) AS avg_delivery_days
FROM 
    order_reviews_dataset r
JOIN 
    orders_dataset o ON r.order_id = o.order_id
WHERE 
    r.review_score IN (1, 2, 3, 4, 5)
    AND o.order_delivered_customer_date IS NOT NULL
    AND o.order_estimated_delivery_date IS NOT NULL
GROUP BY 
    review_group;

-- ===========================================================================================================================================================================
-- 9) Payment Method Impact: Analyze which payment methods lead to the highest average review scores.


WITH payment_review_data AS (
    SELECT 
        order_payments_dataset.payment_type,
        order_reviews_dataset.review_score
    FROM 
        order_payments_dataset
    JOIN 
        order_reviews_dataset 
        ON order_payments_dataset.order_id = order_reviews_dataset.order_id
)

SELECT 
    payment_type,
    ROUND(AVG(review_score), 2) AS average_review_score,
    COUNT(*) AS total_reviews
FROM 
    payment_review_data
GROUP BY 
    payment_type
ORDER BY 
    total_reviews desc ;
    
-- ===========================================================================================================================================================================
-- 10) State-Wise Revenue Per Customer: For each state, compute average revenue per customer.
SELECT 
    c.customer_state,
    COUNT(DISTINCT c.customer_unique_id) AS unique_customers,
    ROUND(SUM(p.payment_value), 2) AS total_payment,
    ROUND(SUM(p.payment_value) / COUNT(DISTINCT c.customer_unique_id), 2) AS avg_payment_per_customer
FROM 
    customers_dataset c
JOIN 
    orders_dataset o ON c.customer_id = o.customer_id
JOIN 
    order_payments_dataset p ON o.order_id = p.order_id
GROUP BY 
    c.customer_state
ORDER BY 
    avg_payment_per_customer DESC;
    
-- ===========================================================================================================================================================================
-- 11)  Repeat Purchase Analysis: What percentage of customers placed more than one order?

SELECT 
    ROUND(100.0 * COUNT(*) / (SELECT COUNT(DISTINCT customer_id) FROM orders_dataset), 2)
    AS repeat_customer_percentage
FROM (
    SELECT customer_id
    FROM orders_dataset
    GROUP BY customer_id
    HAVING COUNT(order_id) > 1
) AS repeat_customers;

-- ===========================================================================================================================================================================
-- 12 Top SKUs by Profit Contribution: Calculate profit per SKU (price - freight + volume assumption), then list top 10 contributors.
SELECT 
    product_id,
    ROUND(SUM(price - freight_value), 1) AS total_profit
FROM 
    order_items_dataset
GROUP BY 
    product_id
ORDER BY 
    total_profit DESC
LIMIT 10;

